#include "ysshellext_imprintingutil.h"


YsShellExt_ImprintingUtil::YsShellExt_ImprintingUtil()
{
	dstShlPtr=nullptr;
	srcShlPtr=nullptr;
	parallelImprint_BiDirectional=YSTRUE;
}

void YsShellExt_ImprintingUtil::CleanUp(void)
{
	dstShlLattice.CleanUp();
	srcToDstVtxMap.CleanUp();
	dstEdgeMidVtxTable.CleanUp();
	dstVtxConn.CleanUp();
}
void YsShellExt_ImprintingUtil::SetDestinationShell(const YsShellExt &dstShl)
{
	dstShlPtr=&dstShl;
	dstEdgeMidVtxTable.SetStorage(dstShl.Conv());
}
void YsShellExt_ImprintingUtil::SetSourceShell(const YsShellExt &srcShl)
{
	srcShlPtr=&srcShl;
	srcToDstVtxMap.SetStorage(srcShl.Conv());
	srcEdgeToDstVtxMap.SetStorage(srcShl.Conv());
}
void YsShellExt_ImprintingUtil::Begin(void)
{
	auto &dstShl=*dstShlPtr;

	CleanUp();
	auto nCell=dstShl.GetNumPolygon();
	dstShlLattice.SetDomain(dstShl.Conv(),nCell);
	dstVtxConn.SetStorage(dstShl.Conv());
}
void YsShellExt_ImprintingUtil::MakeParallelImprintingData(
	    const YsArray <YsShell::PolygonHandle> &srcPlHd,
	    const YsArray <YsShellExt::ConstEdgeHandle> &srcCeHd,
	    const YsVec3 &dir)
{
	MakeParallelImprintingInitialVertexMapping(srcPlHd,srcCeHd,dir);
	MakeSrcEdgeToDstVertexMapping(srcPlHd,srcCeHd);
}

void YsShellExt_ImprintingUtil::MakeParallelImprintingInitialVertexMapping(
	    const YsArray <YsShell::PolygonHandle> &srcPlHd,
	    const YsArray <YsShellExt::ConstEdgeHandle> &srcCeHd,
	    const YsVec3 &dir)
{
	auto &srcShl=*srcShlPtr;
	for(auto plHd : srcPlHd)
	{
		for(auto srcVtHd : srcShl.GetPolygonVertex(plHd))
		{
			AddParallelImprintingVertexMapping(srcPlHd,srcVtHd,dir);
		}
	}
	for(auto ceHd : srcCeHd)
	{
		for(auto srcVtHd : srcShl.GetConstEdgeVertex(ceHd))
		{
			AddParallelImprintingVertexMapping(srcPlHd,srcVtHd,dir);
		}
	}
}

void YsShellExt_ImprintingUtil::AddParallelImprintingVertexMapping(const YsArray <YsShell::PolygonHandle> &srcPlHd,YsShell::VertexHandle srcVtHd,const YsVec3 &dir)
{
	auto attribPtr=srcToDstVtxMap[srcVtHd];
	if(nullptr==attribPtr)
	{
		auto &srcShl=*srcShlPtr;
		auto org=srcShl.GetVertexPosition(srcVtHd);
		auto pos=FindFirstIntersection(srcPlHd,org,dir);
		if(pos.elem.elemType!=YSSHELL_NOELEM)
		{
			// 
		}
		srcToDstVtxMap.SetAttrib(srcVtHd,pos);
	}
}

YsShellExt_ImprintingUtil::PosOnDstShell YsShellExt_ImprintingUtil::FindFirstIntersection(const YsArray <YsShell::PolygonHandle> &srcPlHd,const YsVec3 &org,const YsVec3 &dir) const
{
	auto &dstShl=*dstShlPtr;

	YsShell::PolygonHandle iPlHd[2]={nullptr,nullptr};
	YsVec3 itsc[2];
	YSRESULT res[2]={YSERR,YSERR};

	if(srcShlPtr!=dstShlPtr)
	{
		res[0]=dstShlLattice.FindFirstIntersectionHighPrecision(iPlHd[0],itsc[0],org, dir);
		if(YSTRUE==parallelImprint_BiDirectional)
		{
			res[1]=dstShlLattice.FindFirstIntersectionHighPrecision(iPlHd[1],itsc[1],org,-dir);
		}
	}
	else // if(srcShlPtr==dstShlPtr)
	{
		res[0]=dstShlLattice.FindFirstIntersectionHighPrecision(iPlHd[0],itsc[0],org, dir,srcPlHd.GetN(),srcPlHd);
		if(YSTRUE==parallelImprint_BiDirectional)
		{
			res[1]=dstShlLattice.FindFirstIntersectionHighPrecision(iPlHd[1],itsc[1],org,-dir,srcPlHd.GetN(),srcPlHd);
		}
	}

	YsShellExt_ImprintingUtil::PosOnDstShell posOnDstShl;
	if(nullptr!=iPlHd[0] && nullptr!=iPlHd[1])
	{
		if((itsc[0]-org).GetSquareLength()<(itsc[1]-org).GetSquareLength())
		{
			posOnDstShl.elem.elemType=YSSHELL_POLYGON;
			posOnDstShl.elem.plHd=iPlHd[0];
			posOnDstShl.pos=itsc[0];
		}
		else
		{
			posOnDstShl.elem.elemType=YSSHELL_POLYGON;
			posOnDstShl.elem.plHd=iPlHd[1];
			posOnDstShl.pos=itsc[1];
		}
	}
	else if(nullptr!=iPlHd[0])
	{
		posOnDstShl.elem.elemType=YSSHELL_POLYGON;
		posOnDstShl.elem.plHd=iPlHd[0];
		posOnDstShl.pos=itsc[0];
	}
	else if(nullptr!=iPlHd[1])
	{
		posOnDstShl.elem.elemType=YSSHELL_POLYGON;
		posOnDstShl.elem.plHd=iPlHd[1];
		posOnDstShl.pos=itsc[1];
	}
	else
	{
		posOnDstShl.elem.elemType=YSSHELL_NOELEM;
	}

	return posOnDstShl;
}


void YsShellExt_ImprintingUtil::MakeSrcEdgeToDstVertexMapping(
	    const YsArray <YsShell::PolygonHandle> &srcPlHd,
	    const YsArray <YsShellExt::ConstEdgeHandle> &srcCeHd)
{
	auto &srcShl=*srcShlPtr;
	for(auto plHd : srcPlHd)
	{
		auto plVtHd=srcShl.GetPolygonVertex(plHd);
		for(auto edIdx : plVtHd.AllIndex())
		{
			YsShell::Edge srcEdge;
			srcEdge[0]=plVtHd[edIdx];
			srcEdge[1]=plVtHd.GetCyclic(edIdx+1);
			AddSrcEdgeToVertexMapping(srcEdge);
		}
	}
	for(auto ceHd : srcCeHd)
	{
		YSBOOL isLoop;
		YsArray <YsShell::VertexHandle> ceVtHd;
		srcShl.GetConstEdge(ceVtHd,isLoop,ceHd);
		if(YSTRUE!=isLoop)
		{
			for(YSSIZE_T edIdx=0; edIdx<ceVtHd.GetN()-1; ++edIdx)
			{
				YsShell::Edge srcEdge;
				srcEdge[0]=ceVtHd[edIdx];
				srcEdge[1]=ceVtHd.GetCyclic(edIdx+1);
				AddSrcEdgeToVertexMapping(srcEdge);
			}
		}
		else
		{
			for(auto edIdx : ceVtHd.AllIndex())
			{
				YsShell::Edge srcEdge;
				srcEdge[0]=ceVtHd[edIdx];
				srcEdge[1]=ceVtHd.GetCyclic(edIdx+1);
				AddSrcEdgeToVertexMapping(srcEdge);
			}
		}
	}
}

void YsShellExt_ImprintingUtil::AddSrcEdgeToVertexMapping(YsShell::Edge srcEdge)
{
	auto edgeAttrib=srcEdgeToDstVtxMap.FindAttrib(srcEdge[0],srcEdge[1]);
printf("%s %d\n",__FUNCTION__,__LINE__);
	if(nullptr==edgeAttrib)
	{
		// Cannot deal with the situation if both two ends are outside of the destination shell.
		// Or, if the edge go out of the destination shell, and come in in the middle.
		// Need to think about thes case.

		auto &srcShl=*srcShlPtr;
		auto vtAttrib0=srcToDstVtxMap[srcShl.GetSearchKey(srcEdge[0])];
		auto vtAttrib1=srcToDstVtxMap[srcShl.GetSearchKey(srcEdge[1])];
		YsShell::Elem fromElem;
		YsVec3 fromPos,toPos;

		VtxOnSrcEdge itsc;
		itsc.edge=srcEdge;

		YSBOOL reverse=YSFALSE;
		if(nullptr!=vtAttrib0 && YSSHELL_NOELEM!=vtAttrib0->elem.elemType && 
		   nullptr!=vtAttrib1 && YSSHELL_NOELEM!=vtAttrib1->elem.elemType)
		{
printf("%s %d\n",__FUNCTION__,__LINE__);
			fromElem=vtAttrib0->elem;
			fromPos=vtAttrib0->pos;
			toPos=vtAttrib1->pos;
		}
		else if(nullptr!=vtAttrib0 && YSSHELL_NOELEM!=vtAttrib0->elem.elemType)
		{
printf("%s %d\n",__FUNCTION__,__LINE__);
			fromElem=vtAttrib0->elem;
			fromPos=vtAttrib0->pos;
			toPos=srcShl.GetVertexPosition(srcEdge[1]); // Should be a better way.
		}
		else if(nullptr!=vtAttrib1 && YSSHELL_NOELEM!=vtAttrib1->elem.elemType)
		{
printf("%s %d\n",__FUNCTION__,__LINE__);
			fromElem=vtAttrib1->elem;
			fromPos=vtAttrib1->pos;
			toPos=srcShl.GetVertexPosition(srcEdge[0]); // Should be a better way.
			reverse=YSTRUE;
		}
		else
		{
			return;
		}
printf("%s %s\n",fromPos.Txt(),toPos.Txt());

		YsShellCrawler crawler;
		crawler.SetGoal(toPos);
		crawler.crawlingMode=YsShellCrawler::CRAWL_TO_GOAL;
		if(YSOK==crawler.Start(dstShlPtr->Conv(),fromPos,toPos-fromPos,fromElem))
		{
printf("%s %d\n",__FUNCTION__,__LINE__);
			while(YSOK==crawler.Crawl(dstShlPtr->Conv(),0.0))
			{
printf("%s %d\n",__FUNCTION__,__LINE__);
				auto crawlerState=crawler.GetCurrentState();

				if(crawlerState.pos!=toPos && nullptr!=crawlerState.edVtHd[0])
				{
					PosOnDstShell pos;
					if(crawlerState.state==YsShellCrawler::STATE_ON_EDGE)
					{
						pos.elem.elemType=YSSHELL_EDGE;
						pos.elem.edVtHd[0]=crawlerState.edVtHd[0];
						pos.elem.edVtHd[1]=crawlerState.edVtHd[1];
						pos.pos=crawlerState.pos;
						itsc.dstVtHd.Add(pos);
printf("%s %d\n",__FUNCTION__,__LINE__);
printf("a %s\n",pos.pos.Txt());
					}
					else if(crawlerState.state==YsShellCrawler::STATE_ON_VERTEX)
					{
						pos.elem.elemType=YSSHELL_VERTEX;
						pos.elem.vtHd=crawlerState.edVtHd[0];
						pos.pos=crawlerState.pos;
						itsc.dstVtHd.Add(pos);
printf("%s %d\n",__FUNCTION__,__LINE__);
printf("b %s\n",pos.pos.Txt());
					}
					else
					{
printf("%s %d\n",__FUNCTION__,__LINE__);
printf("b %s\n",pos.pos.Txt());
					}
					// Duplicate vertex-bug: Was doing itsc.dstVtHd.Add(pos) here.
					// But, there is a possibility that state is STATE_IN_POLYGON.
				}

				if(YSTRUE==crawler.reachedDeadEnd || YSTRUE==crawler.reachedGoal)
				{
					break;
				}
			}
		}

		if(YSTRUE==reverse)
		{
			itsc.dstVtHd.Invert();
		}
		srcEdgeToDstVtxMap.SetAttrib(srcEdge,(VtxOnSrcEdge &&)itsc);
	}
}

void YsShellExt_ImprintingUtil::MakeDstEdgeMidVertexTable(void)
{
	for(auto attribHd : srcEdgeToDstVtxMap.AllHandle())
	{
		auto &attrib=srcEdgeToDstVtxMap.GetAttrib(attribHd);
		for(auto &pos : attrib.dstVtHd)
		{
			if(nullptr!=pos.dstVtHd && pos.elem.elemType==YSSHELL_EDGE)
			{
				auto midVtxPtr=dstEdgeMidVtxTable.FindAttrib(pos.elem.edVtHd[0],pos.elem.edVtHd[1]);
				if(nullptr!=midVtxPtr)
				{
					midVtxPtr->Add(pos.dstVtHd);
				}
				else
				{
					YsArray <YsShell::VertexHandle> midVtxArray;
					midVtxArray.Add(pos.dstVtHd);
					dstEdgeMidVtxTable.SetAttrib(pos.elem.edVtHd,(decltype(midVtxArray) &&)midVtxArray);
				}
			}
		}
	}
}

void YsShellExt_ImprintingUtil::MakeDstVertexConnection(void)
{
	for(auto attribHd : srcEdgeToDstVtxMap.AllHandle())
	{
		auto &attrib=srcEdgeToDstVtxMap.GetAttrib(attribHd);
		for(YSSIZE_T idx=0; idx<attrib.dstVtHd.GetN()-1; ++idx)
		{
			YsShell::VertexHandle edVtHd[2]=
			{
				attrib.dstVtHd[idx  ].dstVtHd,
				attrib.dstVtHd[idx+1].dstVtHd
			};
			if(nullptr!=edVtHd[0] && nullptr!=edVtHd[1])
			{
				for(int i=0; i<2; ++i)
				{
					auto from=edVtHd[i];
					auto to=edVtHd[1-i];
					auto connVtHdPtr=dstVtxConn[from];
					if(nullptr!=connVtHdPtr)
					{
						connVtHdPtr->Add(to);
					}
					else
					{
						YsArray <YsShell::VertexHandle> connVtHd;
						connVtHd.Add(to);
						dstVtxConn.SetAttrib(from,connVtHd);
					}
				}
			}
		}
	}
}


YsArray <YsShell::VertexHandle> YsShellExt_ImprintingUtil::FindVertexChainFromSrcEdge(YsShell::VertexHandle vtHd0,YsShell::VertexHandle vtHd1) const
{
	YsArray <YsShell::VertexHandle> vtHdChain;

	auto attribPtr=srcEdgeToDstVtxMap.FindAttrib(vtHd0,vtHd1);
	if(nullptr!=attribPtr)
	{
		auto dstVtx0Ptr=srcToDstVtxMap[attribPtr->edge[0]];
		auto dstVtx1Ptr=srcToDstVtxMap[attribPtr->edge[1]];
		if(nullptr!=dstVtx0Ptr && nullptr!=dstVtx1Ptr)
		{
			vtHdChain.Add(dstVtx0Ptr->dstVtHd);
			for(auto vtx : attribPtr->dstVtHd)
			{
				if(nullptr!=vtx.dstVtHd)
				{
					vtHdChain.Add(vtx.dstVtHd);
				}
			}
			vtHdChain.Add(dstVtx1Ptr->dstVtHd);

			if(attribPtr->edge[0]==vtHd1)
			{
				vtHdChain.Invert();
			}
		}
	}

	return vtHdChain;
}

YsArray <YsShell::VertexHandle> YsShellExt_ImprintingUtil::MakeDstVertexChainFromSrcChain(const YsConstArrayMask <YsShell::VertexHandle> &srcVtxChain,YSBOOL isLoop) const
{
	YsArray <YsShell::VertexHandle> dstVtxChain;

	for(YSSIZE_T idx=0; idx<srcVtxChain.GetN()-1; ++idx)
	{
		auto edgeChain=FindVertexChainFromSrcEdge(srcVtxChain[idx],srcVtxChain[idx+1]);
printf("o %d->%d, %d\n",dstShlPtr->GetSearchKey(srcVtxChain[idx]),dstShlPtr->GetSearchKey(srcVtxChain[idx+1]),edgeChain.GetN());
		if(0==dstVtxChain.GetN() || (0<edgeChain.GetN() && edgeChain[0]==dstVtxChain.Last()))
		{
			dstVtxChain.DeleteLast();
			dstVtxChain.Add(edgeChain);
		}
	}

	if(3<=srcVtxChain.GetN() && YSTRUE==isLoop)
	{
		auto edgeChain=FindVertexChainFromSrcEdge(srcVtxChain.Last(),srcVtxChain[0]);
printf("c %d->%d, %d\n",dstShlPtr->GetSearchKey(srcVtxChain.Last()),dstShlPtr->GetSearchKey(srcVtxChain[0]),edgeChain.GetN());
		if(0==dstVtxChain.GetN() || (0<edgeChain.GetN() && edgeChain[0]==dstVtxChain.Last()))
		{
			dstVtxChain.DeleteLast();
			dstVtxChain.Add(edgeChain);
		}
		if(2<=dstVtxChain.GetN() && dstVtxChain[0]==dstVtxChain.Last())
		{
			dstVtxChain.DeleteLast();
		}
	}

	return dstVtxChain;
}

YsArray <YsShellExt_ImprintingUtil::DstVtxChain> YsShellExt_ImprintingUtil::MakeDstVertexChain(
	    const YsArray <YsShell::PolygonHandle> &srcPlHd,
	    const YsArray <YsShellExt::ConstEdgeHandle> &srcCeHd)
{
	auto &dstShl=*dstShlPtr;

	YsArray <DstVtxChain> vtxChain;
	for(auto plHd : srcPlHd)
	{
		auto plVtHd=dstShl.GetPolygonVertex(plHd);
		DstVtxChain chain;
		chain.vtxChain=MakeDstVertexChainFromSrcChain(plVtHd,YSTRUE);
		chain.isLoop=YSTRUE;
		vtxChain.Add(chain);
	}
	for(auto ceHd : srcCeHd)
	{
		YSBOOL isLoop;
		YsArray <YsShell::VertexHandle> ceVtHd;
		dstShl.GetConstEdge(ceVtHd,isLoop,ceHd);
		DstVtxChain chain;
		chain.vtxChain=MakeDstVertexChainFromSrcChain(ceVtHd,isLoop);
		chain.isLoop=isLoop;
		vtxChain.Add(chain);
	}

	return vtxChain;
}

YsArray <YsShell::VertexHandle,2> YsShellExt_ImprintingUtil::MakeCutterPath(const DstVtxChain &vc,YSSIZE_T fromIdx)
{
	auto &dstShl=*dstShlPtr;

	YsArray <YsShell::VertexHandle,2> cutter;

	YSSIZE_T subLoopCount=(YSTRUE==vc.isLoop ? vc.vtxChain.GetN() : vc.vtxChain.GetN()-1-fromIdx);
	YsShell::VertexHandle fromVtHd=vc.vtxChain[fromIdx],toVtHd=vc.vtxChain.GetCyclic(fromIdx+1);

	if(0!=dstShl.GetNumPolygonUsingVertex(fromVtHd) &&
	   0==dstShl.GetNumPolygonUsingEdge(fromVtHd,toVtHd))
	{
		cutter.Add(fromVtHd);
		for(decltype(fromIdx) toIdx=fromIdx+1; toIdx<fromIdx+subLoopCount; ++toIdx)
		{
			auto nextVtHd=vc.vtxChain.GetCyclic(toIdx);
			cutter.Add(nextVtHd);
			if(0!=dstShl.GetNumPolygonUsingVertex(nextVtHd))
			{
				break;
			}
		}

		if(2>cutter.GetN() || 0==dstShl.GetNumPolygonUsingVertex(cutter.Last()))
		{
			cutter.CleanUp();
		}
	}

	return cutter;
}

// Turned out it is more complex.
//YsArray <YsArray <YsShell::VertexHandle> > YsShellExt_ImprintingUtil::FindBridge(YsShell::VertexHandle fromVtHd) const
//{
//	auto &dstShl=*dstShlPtr;
//	YsArray <YsArray <YsShell::VertexHandle> > bridgeArray;
//	if(0<dstShl.GetNumPolygonUsingVertex(fromVtHd))
//	{
//		auto connVtHdPtr=dstVtxConn[fromVtHd];
//		if(nullptr!=connVtHdPtr)
//		{
//			for(auto connVtHd : *connVtHdPtr)
//			{
//				if(0==dstShl.GetNumPolygonUsingEdge(fromVtHd,connVtHd))
//				{
//					YsArray <YsShell::VertexHandle> bridge;
//					bridge.Add(fromVtHd);
//					bridge.Add(connVtHd);
//
//					auto vtHd0=fromVtHd,vtHd1=connVtHd;
//					for(;;)
//					{
//						if(0<dstShl.GetNumPolygonUsingVertex())
//						{
//							break;
//						}
//						
//					}
//				}
//			}
//		}
//	}
//}
