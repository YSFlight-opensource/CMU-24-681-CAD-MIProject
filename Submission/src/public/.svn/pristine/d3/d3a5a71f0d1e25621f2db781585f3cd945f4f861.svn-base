/* ////////////////////////////////////////////////////////////

File Name: ysshellextedit_topologyutil.h
Copyright (c) 2015 Soji Yamakawa.  All rights reserved.
http://www.ysflight.com

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, 
   this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//////////////////////////////////////////////////////////// */

#ifndef YSSHELLEXTEDIT_TOPOLOGYUTIL_IS_INCLUDED
#define YSSHELLEXTEDIT_TOPOLOGYUTIL_IS_INCLUDED
/* { */

#include <ysshellextedit.h>
#include "ysshellext_localop.h"
#include "ysshellext_topologyutil.h"

class YsShellExtEdit_TopologyUtil : private YsShell_LocalOperation, public YsShellExt_TopologyUtil
{
public:
	YsArray <YsShellPolygonHandle> modifiedPlHdArray;
	YsArray <YsShellExt::ConstEdgeHandle> modifiedCeHdArray;


	void CleanUp(void);

	YSRESULT InsertVertexOnEdge(YsShellExtEdit &shl,const YsShellVertexHandle edVtHd[2],YsShellVertexHandle midVtHd);

	YSRESULT InsertVertexOnEdge(YsShellExtEdit &shl,YsShellVertexHandle fromVtHd,YsShellVertexHandle toVtHd,YSSIZE_T nVt,const YsShellVertexHandle vtHdArray[]);
	YSRESULT InsertVertexOnEdge(YsShellExtEdit &shl,const YsShellVertexHandle edVtHd[2],YSSIZE_T nVt,const YsShellVertexHandle vtHdArray[]);

	template <const int N>
	YSRESULT InsertVertexOnEdge(YsShellExtEdit &shl,YsShellVertexHandle fromVtHd,YsShellVertexHandle toVtHd,YsArray <YsShellVertexHandle,N> &vtHdArray);

	template <const int N>
	YSRESULT InsertVertexOnEdge(YsShellExtEdit &shl,const YsShellVertexHandle edVtHd[2],YsArray <YsShellVertexHandle,N> &vtHdArray);

	YSRESULT SplitPolygon(YsShellExtEdit &shl,YsShellPolygonHandle plHd,YsShellVertexHandle vtHd0,YsShellVertexHandle vtHd1);
	YSRESULT SplitPolygon(YsShellExtEdit &shl,YsShellPolygonHandle plHd,const YsShellVertexHandle vtHd[2]);

	/*! Splits a degenerate polygon (using a vertex more than once) into non-degenerate polygons. 
	   Does nothing and returns YSERR if the polygon is not degenerate.  
	   Returns YSOK if successful.  
	   It could fail if the polygon cannot be split into a unique set of non-degenerate polygons. */
	YSRESULT SplitDegeneratePolygon(YsShellExtEdit &shl,YsShellPolygonHandle plHd);

	/*! Splits all degenerate polygons in the shell. */
	YSRESULT SplitAllDegeneratePolygon(YsShellExtEdit &shl);
};

template <const int N>
YSRESULT YsShellExtEdit_TopologyUtil::InsertVertexOnEdge(YsShellExtEdit &shl,YsShellVertexHandle fromVtHd,YsShellVertexHandle toVtHd,YsArray <YsShellVertexHandle,N> &vtHdArray)
{
	return InsertVertexOnEdge(shl,fromVtHd,toVtHd,vtHdArray.GetN(),vtHdArray);
}

template <const int N>
YSRESULT YsShellExtEdit_TopologyUtil::InsertVertexOnEdge(YsShellExtEdit &shl,const YsShellVertexHandle edVtHd[2],YsArray <YsShellVertexHandle,N> &vtHdArray)
{
	return InsertVertexOnEdge(shl,edVtHd[0],edVtHd[1],vtHdArray.GetN(),vtHdArray);
}

/* } */
#endif
